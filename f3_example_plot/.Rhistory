data(iris) ; library(ggplot2)
names(iris)
iris$Sepal
iris$Sepal.Width
table(iris$Species)
---
title: "week3"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
dim(testing)
qplot(Petal.width, Sepal.Width, color=Species, data=training)
qplot(Petal.width, Sepal.Width, color=Species, data=training)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.width, Sepal.Width, color=Species, data=training)
qplot(Petal.Width, Sepal.Width, color=Species, data=training)
modFit <- train(Species~Petal.Width + Sepal.Width, method="rpart", data=training)
modFit$finalModel
plot(modFit$finalModel, uniform=True, main="Classification Tree")
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFits$finalModel, use.n=TRUE, all=TRUE, cex=.8)
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
library(rattle)
install.packages(rattle)
install.packages("RGtk2")
install.packages("RGtk2")
install.packages("rattle")
library(rattle)
library(rattle)
library(rattle)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
install.packages('rpart.plot')
install.packages('rpart.plot')
fancyRpartPlot(modFit$finalModel)
```{r, eval=FALSE}
predict(modFit, testing)
confusionMatrix(pred,testing$Species)
library(caret)
confusionMatrix(pred,testing$Species)
pred
pred <- predict(modFit, testing)
confusionMatrix(pred,testing$Species)
modFit <- train(Species~., method="party", data=training)
library(ElmStatLearn)
install.packages(ElmStatLearn)
install.packages("ElmStatLearn")
data(ozone, package="ElmStatLearn")
require(ElemStatLearn)
install.packages("ElmStatLearn")
setRepositories()
install.packages("ElmStatLearn")
libarary(mlbench)
library(mlbench)
install.packages("mlbench")
data(ozone)
read.table("ozone.data")
read.table("ozone.data")
pwd
read.table("ozone.data")
read.table("/Users/bian/sandbox/practical-ML-R/Week 3/ozone.data")
read.table("~/sandbox/practical-ML-R/Week 3/ozone.data")
ozone
ozone = read.table("~/sandbox/practical-ML-R/Week 3/ozone.data")
ozone
names(ozone)
? read.table
ozone = read.table("~/sandbox/practical-ML-R/Week 3/ozone.data", header=TRUE)
ozone
ozone <- ozone[order(ozone$ozone),]
ozone
ll <- matrix(NA,nrow=10,ncol=155)
for (i in 1:10){
ss <- sample(i=1:dim(ozone)[1],replace=T)
ozone0 <- zone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess0(temprature ~ ozone,data=ozone0,span=0.2)
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
ll <- matrix(NA,nrow=10,ncol=155)
ll <- matrix(NA,nrow=10,ncol=155)
ll <- matrix(NA,nrow=10,ncol=155)
ll <- matrix(NA,nrow=10,ncol=155)
ll <- matrix(NA,nrow=10,ncol=155)
ll <- matrix(NA,nrow=10,ncol=155)
ll <- matrix(NA,nrow=10,ncol=155)
ll <- matrix(NA,nrow=10,ncol=155)
ll <- matrix(NA,nrow=10,ncol=155)
for (i in 1:10){
ss <- sample(1:dim(ozone)[1],replace=T)
ozone0 <- zone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess0(temprature ~ ozone,data=ozone0,span=0.2)
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
ll <- matrix(NA,nrow=10,ncol=155)
for (i in 1:10){
ss <- sample(1:dim(ozone)[1],replace=T)
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess0(temprature ~ ozone,data=ozone0,span=0.2)
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
ozone <- ozone[order(ozone$ozone),]i = 1
i=1
ss <- sample(1:dim(ozone)[1],replace=T)
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess0(temprature ~ ozone,data=ozone0,span=0.2)
loess0 <- loess(temprature ~ ozone,data=ozone0,span=0.2)
names(ozone0)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
ll <- matrix(NA,nrow=10,ncol=155)
for (i in 1:10){
ss <- sample(1:dim(ozone)[1],replace=T)
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
ss <- sample(1:dim(ozone)[1],replace=T)
ss
dim(ozone)[1]
ss <- sample(1:dim(ozone)[1],replace=T)
sample(1:dim(ozone)[1],replace=T)
sample(1:dim(ozone)[1],replace=T)
sample(1:dim(ozone)[1],replace=T)
sample(1:dim(ozone)[1],replace=T)
? sample
dim(ozone)[1]
dim(ozone)[1]
lot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
for (i in 1:10) {lines(1:155,ll[i,],col="gray",lwd=2)}
lineds(1:155,apply(ll,2,mean),col="red",lwd=2)
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
lot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
for (i in 1:10) {lines(1:155,ll[i,],col="gray",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
lot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
for (i in 1:10) {lines(1:155,ll[i,],col="gray",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
for (i in 1:10) {lines(1:155,ll[i,],col="gray",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
predictors = data.frame(ozone=ozone$ozone)
temprature = ozone$temprature
predictors
temprature
temprature = ozone$temprature
temprature = ozone$temprature
temprature
ozone
ozone$temperature
temprature = ozone$temperature
temprature
predictors = data.frame(ozone=ozone$ozone)
temprature = ozone$temperature
treebag <- bag(predictors, temprature, B=10,
bagControl = bagContr(fit=ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
predictors = data.frame(ozone=ozone$ozone)
temprature = ozone$temperature
treebag <- bag(predictors, temprature, B=10,
bagControl = bagControl(fit=ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
plot(ozone$ozone,ozone$temperature,color="lightgray",pch=19)
points(ozone$ozone,predict(treebag$fits[[1]]$fit, predictors),pch=19,color="red")
points(ozone$ozone,predict(treebag, predictors),pch=19,color="blue")
plot(ozone$ozone,ozone$temperature,col="lightgray",pch=19)
points(ozone$ozone,predict(treebag$fits[[1]]$fit, predictors),pch=19,col="red")
points(ozone$ozone,predict(treebag, predictors),pch=19,col="blue")
data(iris); library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
modFit <- train(Species ~., method="rf",prox=TRUE)
modFit <- train(Species ~., data=training,method="rf",prox=TRUE)
modFit$finalModel
modFit
getTree(modFit$finalModel,k=2)
fancyRpartPlot(getTree(modFit$finalModel,k=2))
fancyRpartPlot(getTree(modFit$finalModel,k=2))
irisP <- classCenter(training[,c(3,4)],training$Species,modFit$finalModel%prox)
irisP <- classCenter(training[,c(3,4)],training$Species,modFit$finalModel$prox)
irisP <- as.data.frame(irisP); irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width, Petal.length, col=Species, data=training)
p + geom_point(aws(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisiP)
p + geom_point(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisiP)
p + geom_point(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
p <- qplot(Petal.Width, Petal.Length, col=Species, data=training)
p + geom_point(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
pred <- predict(modFit,testing); testing$predRight <- pred=testing$Species
table(pred,testing$predRight)
table(pred,testing$Species)
pred <- predict(modFit,testing)
testing$predRight <- pred=testing$Species
testing$predRight <- (pred=testing$Species)
table(pred,testing$Species)
pred <- predict(modFit,testing)
testing$predRight <- (pred=testing$Species)
table(pred,testing$Species)
pred <- predict(modFit,testing)
testing$predRight <- (pred=testing$Species)
table(pred,testing$Species)
irisP <- classCenter(training[,c(3,4)],training$Species,modFit$finalModel$prox)
irisP <- as.data.frame(irisP); irisP$Species <- rownames(irisP)
p <- qplot(Petal.Width, Petal.Length, col=Species, data=training)
p + geom_point(aes(x=Petal.Width,y=Petal.Length,col=Species),size=5,shape=4,data=irisP)
modFit <- train(Species ~.,data=training,method="rf",
prox=TRUE)  # prox gives us extra informaiotn that we use in following plot
modFit
pred <- predict(modFit,testing)
testing$predRight <- (pred=testing$Species)
table(pred,testing$Species)
testing$predRight
pred
testing$predRight
testing$predRight <- (pred==testing$Species)
table(pred,testing$Species)
testing$predRight
table(pred,testing$predRight)
qplot(Petal.Width,Petal.Length,color=predRight,data=testing,main="newdata prediction")
library(shiny)
install.packages("shiny")
runApp()
runApp()
library(shiny)
runApp()
setwd("~/sandbox/developing-data-products/testing")
runApp()
runApp()
runApp()
setwd("~/sandbox/developing-data-products/f2_simple_predictor")
runApp()
setwd("~/sandbox/developing-data-products/f3_example_plot")
runApp()
install(usingR)
install.packages(usingR)
install.packages(UsingR)
library(UsingR)
install.packages("UsingR")
library(UsingR)
shiny::runApp()
dir(galton)
data(glaton)
library(UsingR)
data(galton)
dir(glaton)
glaton
galton
dir(galton)
ls(galton)
summary(galton)
table(galton)
hist(galton$child, xlab = 'child height', col='light blue', main='histogram')
my <- input$mu
mu = .5
mu = .65
lines(c(mu,mu), c(0,200), col="red", lwd=5)
mse <- mean((glaton$child - mu)^2)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu=", mu))
text(63, 140, paste("MSE=", round(mse,2)))
shiny::runApp()
